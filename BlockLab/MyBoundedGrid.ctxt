#BlueJ class context
comment0.target=MyBoundedGrid
comment0.text=\n\ Simulates\ grid\ which\ can\ contain,\ remove,\ and\ add\ items\ inside\n\n\ @author\ Anu\ Datar\n\ @author\ Melody\ Yin\n\ @param\ <E>\ the\ kind\ of\ element\ being\ stored\ in\ the\ grid\n\ @version\ 3-2-22\n
comment1.params=nrow\ ncol
comment1.target=MyBoundedGrid(int,\ int)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ MyBoundedGrid\n\ @param\ nrow\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ rows\ in\ the\ grid\n\ @param\ ncol\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ number\ of\ cols\ in\ the\ grid\n
comment2.params=
comment2.target=int\ getNumRows()
comment2.text=\n\ @return\ the\ number\ of\ rows\ in\ the\ grid\n
comment3.params=
comment3.target=int\ getNumCols()
comment3.text=\n\ @return\ the\ number\ of\ columns\ in\ the\ grid\n
comment4.params=loc
comment4.target=boolean\ isValid(Location)
comment4.text=\n\ Determines\ if\ a\ given\ location\ is\ within\ the\ bounds\ of\ the\ grid\n\ @param\ loc\ \ \ \ \ \ \ \ \ \ \ the\ location\ we\ are\ determining\ validity\ of\n\ @return\ true\ if\ the\ location\ is\ within\ the\ bounds\ of\ the\ grid\n\ \ \ \ \ \ \ \ \ \ false\ if\ the\ location\ is\ not\n
comment5.params=location\ toinsert
comment5.target=java.lang.Object\ put(Location,\ java.lang.Object)
comment5.text=\n\ Inserts\ a\ specified\ item\ in\ a\ specified\ location\ and\ returns\ the\n\ \ \ \ \ \ previous\ occupant\ of\ that\ location\n\ @param\ location\ \ \ \ \ \ the\ location\ we\ are\ inserting\ the\ new\ item\ in\n\ @param\ toinsert\ \ \ \ \ \ the\ item\ we\ are\ inserting\ into\ the\ grid\n\ @return\ null\ if\ the\ cell\ was\ empty\ before\ insertion\n\ \ \ \ \ \ \ \ \ \ the\ previous\ occupant\ of\ the\ cell\ if\ the\ cell\ wasn't\ empty\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ before\ insertion\n
comment6.params=location
comment6.target=java.lang.Object\ get(Location)
comment6.text=\n\ @param\ location\ \ \ \ \ \ the\ location\ we\ are\ looking\ for\ an\ object\ in\n\ @return\ null\ if\ the\ location\ is\ invalid\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ otherwise,\ the\ item\ at\ the\ specified\ location\n
comment7.params=location
comment7.target=java.lang.Object\ remove(Location)
comment7.text=\n\ @param\ location\ \ \ \ \ \ \ \ \ \ the\ location\ of\ the\ cell\ that\ is\ being\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ emptied\n\ @return\ the\ previous\ occupant\ of\ the\ now\ empty\ cell\n\ @postcondition\ the\ cell\ at\ the\ specified\ location\ in\ the\ grid\ is\ empty\n
comment8.params=
comment8.target=java.util.ArrayList\ getOccupiedLocations()
comment8.text=\n\ @return\ all\ of\ the\ occupied\ locations\n
numComments=9

#BlueJ class context
comment0.target=BoundedGrid
comment0.text=\n\ AP(r)\ Computer\ Science\ GridWorld\ Case\ Study\:\n\ Copyright(c)\ 2002-2006\ College\ Entrance\ Examination\ Board\n\ (http\://www.collegeboard.com).\n\n\ This\ code\ is\ free\ software;\ you\ can\ redistribute\ it\ and/or\ modify\n\ it\ under\ the\ terms\ of\ the\ GNU\ General\ Public\ License\ as\ published\ by\n\ the\ Free\ Software\ Foundation.\n\n\ This\ code\ is\ distributed\ in\ the\ hope\ that\ it\ will\ be\ useful,\n\ but\ WITHOUT\ ANY\ WARRANTY;\ without\ even\ the\ implied\ warranty\ of\n\ MERCHANTABILITY\ or\ FITNESS\ FOR\ A\ PARTICULAR\ PURPOSE.\ \ See\ the\n\ GNU\ General\ Public\ License\ for\ more\ details.\n\ \n\ A\ <code>BoundedGrid</code>\ is\ a\ rectangular\ grid\ with\ a\ finite\ number\ of\n\ rows\ and\ columns.\ <br\ />\n\ The\ implementation\ of\ this\ class\ is\ testable\ on\ the\ AP\ CS\ AB\ exam.\n\n\ @author\ Alyce\ Brady\n\ @author\ APCS\ Development\ Committee\n\ @author\ Cay\ Horstmann\n\ \n\ @version\ 4-8-22\n\ \n\ @param\ <E>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ object\ being\ kept\ in\ the\ grid\n
comment1.params=rows\ cols
comment1.target=BoundedGrid(int,\ int)
comment1.text=\n\ Constructs\ an\ empty\ bounded\ grid\ with\ the\ given\ dimensions.\n\ (Precondition\:\ <code>rows\ >\ 0</code>\ and\ <code>cols\ >\ 0</code>.)\n\ @param\ rows\ number\ of\ rows\ in\ BoundedGrid\n\ @param\ cols\ number\ of\ columns\ in\ BoundedGrid\n
comment2.params=
comment2.target=int\ getNumRows()
comment2.text=\n\ @return\ the\ number\ of\ rows\ in\ the\ grid\n
comment3.params=
comment3.target=int\ getNumCols()
comment3.text=\n\ @return\ the\ number\ of\ columns\ in\ the\ grid\n
comment4.params=loc
comment4.target=boolean\ isValid(Location)
comment4.text=\n\ Determines\ if\ the\ provided\ location\ is\ within\ the\ bounds\ of\ the\ grid.\n\ @param\ loc\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ location\ whose\ validity\ is\ being\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ determined\n\ @return\ true\ if\ the\ location\ is\ within\ the\ bounds,\ false\ otherwise\n
comment5.params=
comment5.target=java.util.ArrayList\ getOccupiedLocations()
comment5.text=\n\ Finds\ all\ locations\ on\ the\ grid\ that\ are\ occupied\ (aren't\ null)\n\ @return\ occupied\ locations\ on\ the\ grid\n
comment6.params=loc
comment6.target=java.lang.Object\ get(Location)
comment6.text=\n\ Retrieves\ the\ object\ stored\ at\ a\ given\ location\n\ @param\ loc\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ location\ that\ information\ is\ being\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ retrieved\ from\n\ @return\ the\ object\ at\ location\ loc\n
comment7.params=loc\ obj
comment7.target=java.lang.Object\ put(Location,\ java.lang.Object)
comment7.text=\n\ Adds\ a\ specified\ object\ to\ a\ given\ location\ on\ the\ grid\n\ @param\ loc\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ location\ where\ the\ new\ object\ is\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ being\ added\n\ @param\ obj\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ object\ being\ added\ to\ the\ grid\n\ @return\ the\ previous\ occupant\ of\ the\ grid\ (null\ if\ there\ was\ none)\n
comment8.params=loc
comment8.target=java.lang.Object\ remove(Location)
comment8.text=\n\ Removes\ an\ object\ from\ a\ specified\ location\ on\ the\ grid\n\ @param\ loc\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ location\ from\ which\ the\ object\ is\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ being\ removed\ from\n\ @return\ the\ object\ that\ was\ just\ removed\ from\ the\ grid\ (null\ if\ it\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ was\ empty)\n
numComments=9

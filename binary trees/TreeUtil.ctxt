#BlueJ class context
comment0.target=TreeUtil
comment0.text=\n\ TreeUtil\ contains\ the\ following\ methods\ for\ manipulating\ binary\ trees\:\n\ \ \ \ \ \ \ \ \ \ find\ the\ leftmost\ and\ rightmost\ nodes\ of\ the\ tree\n\ \ \ \ \ \ \ \ \ \ find\ the\ maximum\ depth\ of\ a\ tree\n\ \ \ \ \ \ \ \ \ \ create\ a\ random\ tree\ of\ a\ specified\ depth\n\ \ \ \ \ \ \ \ \ \ count\ the\ number\ of\ nodes\ or\ leaves\ in\ the\ tree\n\ \ \ \ \ \ \ \ \ \ visit\ the\ values\ of\ a\ binary\ tree\ in\ preorder,\ inorder,\ or\ postorder\n\ \ \ \ \ \ \ \ \ \ represent\ tree\ in\ a\ linear\ form\ (in\ a\ list)\n\ \ \ \ \ \ \ \ \ \ save\ given\ tree\ in\ a\ file\n\ \ \ \ \ \ \ \ \ \ builds\ tree\ given\ a\ linear\ representation\ of\ the\ tree\n\ \ \ \ \ \ \ \ \ \ read\ a\ file\ name\ and\ builds\ a\ tree\ based\ on\ the\ file's\ contents\n\ \ \ \ \ \ \ \ \ \ plays\ a\ game\ of\ twenty\ questions\ with\ the\ user\n\ \ \ \ \ \ \ \ \ \ make\ a\ duplicate\ of\ a\ tree\n\ \ \ \ \ \ \ \ \ \ determine\ if\ two\ trees\ have\ the\ same\ shape\n\ \ \ \ \ \ \ \ \ \ create\ morse\ tree\n\ \ \ \ \ \ \ \ \ \ decode\ morse\ code\n\ \ \ \ \ \ \ \ \ \ \n\ @author\ Melody\ Yin\n\ @version\ 12/3/21\n\n
comment1.params=t
comment1.target=java.lang.Object\ leftmost(TreeNode)
comment1.text=\n\ Returns\ the\ leftmost\ node\ in\ the\ tree,\ given\ the\ root\ node\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ node\ of\ the\ tree\n\ @return\ the\ leftmost\ node\n
comment10.params=t\ list
comment10.target=void\ fillList(TreeNode,\ java.util.List)
comment10.text=\n\ takes\ in\ list\ of\ strings\ and\ fills\ list\ with\ contents\ of\ tree,\n\ \ \ \ \ \ including\ $\ markers\ this\ should\ follow\ a\ preorder\ logic\:\n\ \ \ \ \ \ root,\ left,\ right\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ of\ the\ tree\n\ @param\ list\ \ \ \ \ \ \ \ \ \ the\ list\ to\ be\ filled\ with\ the\ tree's\ contents\n
comment11.params=fileName\ t
comment11.target=void\ saveTree(java.lang.String,\ TreeNode)
comment11.text=\n\ saveTree\ uses\ the\ FileUtil\ utility\ class\ to\ save\ the\ tree\ rooted\ at\ t\n\ as\ a\ file\ with\ the\ given\ file\ name\n\ @param\ fileName\ \ \ \ \ \ the\ name\ of\ the\ file\ to\ create\ which\ will\ hold\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ data\ values\ in\ the\ tree\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ of\ the\ tree\ to\ save\n
comment12.params=it
comment12.target=TreeNode\ buildTree(java.util.Iterator)
comment12.text=\n\ buildTree\ takes\ in\ an\ iterator\ which\ will\ iterate\ through\ a\ valid\n\ \ \ \ \ \ \ \ \ \ description\ of\ a\ binary\ tree\ with\ String\ values.\ \ Null\ \n\ \ \ \ \ \ \ \ \ \ nodes\ are\ indicated\ by\ "$"\ markers\n\ @param\ it\ \ \ \ \ \ \ \ \ \ \ \ the\ iterator\ which\ will\ iterate\ over\ the\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tree\ description\n\ @return\ the\ pointer\ to\ the\ root\ of\ the\ tree\ built\ by\ the\ iteration\n
comment13.params=fileName
comment13.target=TreeNode\ loadTree(java.lang.String)
comment13.text=\n\ read\ a\ file\ description\ of\ a\ tree\ and\ then\ build\ the\ tree\n\ @param\ \ \ \ \ \ \ \ \ \ \ fileName\ is\ a\ valid\ file\ name\ for\ a\ file\ that\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ describes\ a\ binary\ tree\n\ @return\ a\ pointer\ to\ the\ root\ of\ the\ tree\n
comment14.params=
comment14.target=java.lang.String\ getUserInput()
comment14.text=\n\ utility\ method\ that\ waits\ for\ a\ user\ to\ type\ text\ into\ Std\ Input\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ then\ press\ enter\n\ @return\ the\ string\ entered\ by\ the\ user\n
comment15.params=t\ display
comment15.target=void\ twentyQuestionsRound(TreeNode,\ TreeDisplay)
comment15.text=\n\ plays\ a\ single\ round\ of\ 20\ questions\n\ postcondition\:\ \ plays\ a\ round\ of\ twenty\ questions,\ asking\ the\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ user\ questions\ as\ it\ walks\ down\ the\ given\ knowledge\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ tree,\ lighting\ up\ the\ display\ as\ it\ goes;\ modifies\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ tree\ to\ include\ information\ learned.\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ pointer\ to\ the\ root\ of\ the\ game\ tree\n\ @param\ display\ \ \ \ \ \ \ the\ graphical\ display\ which\ will\ show\ the\ progress\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ of\ the\ game\n
comment16.params=
comment16.target=void\ twentyQuestions()
comment16.text=\ \n\ Plays\ a\ game\ of\ 20\ questions.\ Begins\ by\ reading\ in\ a\ starting\ file\n\ \ \ \ \ \ and\ then\ plays\ multiple\ rounds\ until\ the\ user\ enters\ "quit".\n\ \ \ \ \ \ The\ final\ tree\ is\ then\ saved.\n
comment17.params=t
comment17.target=TreeNode\ copy(TreeNode)
comment17.text=\n\ copy\ a\ binary\ tree\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ of\ the\ tree\ to\ copy\n\ @return\ a\ new\ tree,\ which\ is\ a\ complete\ copy\n\ \ \ \ \ \ \ \ \ of\ t\ with\ all\ new\ TreeNode\ objects\n\ \ \ \ \ \ \ \ \ pointing\ to\ the\ same\ values\ as\ t\ (in\ the\ same\ order,\ shape,\ etc)\n
comment18.params=t1\ t2
comment18.target=boolean\ sameShape(TreeNode,\ TreeNode)
comment18.text=\n\ tests\ to\ see\ if\ two\ trees\ have\ the\ same\ shape,\ but\ not\ necessarily\ the\n\ same\ values.\ \ Two\ trees\ have\ the\ same\ shape\ if\ they\ have\ TreeNode\ objects\n\ in\ the\ same\ locations\ relative\ to\ the\ root\n\ @param\ t1\ \ \ \ \ \ \ \ \ \ \ \ pointer\ to\ the\ root\ of\ the\ first\ tree\n\ @param\ t2\ \ \ \ \ \ \ \ \ \ \ \ pointer\ to\ the\ root\ of\ the\ second\ tree\n\ @return\ true\ if\ t1\ and\ t2\ have\ the\ same\ shape,\ false\ otherwise\n
comment19.params=display
comment19.target=TreeNode\ createDecodingTree(TreeDisplay)
comment19.text=\n\ Generate\ a\ tree\ for\ decoding\ Morse\ code\n\ @param\ display\ \ \ \ \ \ \ the\ display\ that\ will\ show\ the\ decoding\ tree\n\ @return\ the\ decoding\ tree\n
comment2.params=t
comment2.target=java.lang.Object\ rightmost(TreeNode)
comment2.text=\n\ Returns\ the\ rightmost\ node\ in\ the\ tree,\ given\ the\ root\ node\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ node\ of\ the\ tree\n\ @return\ the\ rightmost\ node\ in\ the\ tree\n
comment20.params=decodingTree\ letter\ code\ display
comment20.target=void\ insertMorse(TreeNode,\ java.lang.String,\ java.lang.String,\ TreeDisplay)
comment20.text=\n\ helper\ method\ for\ building\ a\ Morse\ code\ decoding\ tree.\n\ postcondition\:\ \ inserts\ the\ given\ letter\ into\ the\ decodingTree,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ the\ appropriate\ position,\ as\ determined\ by\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Morse\ code\ sequence;\ lights\ up\ the\ display\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ as\ it\ walks\ down\ the\ tree\n\ @param\ decodingTree\ \ \ \ \ \ \ is\ the\ partial\ decoding\ tree\n\ @param\ letter\ \ \ \ \ \ \ \ \ \ \ \ \ is\ the\ letter\ to\ add\n\ @param\ code\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ the\ Morse\ code\ for\ letter\n\ @param\ display\ \ \ \ \ \ \ \ \ \ \ \ is\ the\ display\ that\ will\ show\ progress\ as\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ method\ walks\ down\ the\ tree\n
comment21.params=decodingTree\ cipherText\ display
comment21.target=java.lang.String\ decodeMorse(TreeNode,\ java.lang.String,\ TreeDisplay)
comment21.text=\n\ decodes\ Morse\ code\ by\ walking\ the\ decoding\ tree\ according\ to\ input\ code\n\ @param\ decodingTree\ \ \ \ \ \ \ is\ the\ Morse\ code\ decoding\ tree\n\ @param\ cipherText\ \ \ \ \ \ \ \ \ is\ Morse\ code\ made\ of\ dots,\ dashes,\ and\ spaces\n\ @param\ display\ \ \ \ \ \ \ \ \ \ \ \ is\ the\ display\ object\ that\ shows\ decoding\n\ @return\ the\ string\ represented\ by\ cipherText\n
comment22.params=expTree
comment22.target=int\ eval(TreeNode)
comment22.text=\n\ optional\ work\n\ @param\ expTree\ is\ expression\ to\ be\ evaluated\n\ @return\ evaluated\ expression\n
comment23.params=exp
comment23.target=TreeNode\ createExpressionTree(java.lang.String)
comment23.text=\n\ converts\ expression\ to\ tree\n\ @param\ exp\ is\ expression\ to\ be\ converted\n\ @return\ root\ of\ tree\n
comment24.params=out
comment24.target=void\ debugPrint(java.lang.String)
comment24.text=\n\ debug\ printout\n\ postcondition\:\ out\ is\ printed\ to\ System.out\n\ @param\ out\ the\ string\ to\ send\ to\ System.out\n
comment3.params=t
comment3.target=int\ maxDepth(TreeNode)
comment3.text=\n\ Returns\ the\ max\ depth\ of\ the\ tree\ (the\ height\ of\ the\ tree)\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ node\ of\ the\ tree\n\ @return\ the\ max\ depth\ of\ the\ tree\n
comment4.params=depth
comment4.target=TreeNode\ createRandom(int)
comment4.text=\n\ create\ a\ random\ tree\ of\ the\ specified\ depth.\ \ No\ attempt\ to\ balance\n\ tree\ is\ provided.\n\ @param\ depth\ \ \ \ \ \ \ \ \ the\ depth\ of\ the\ tree\n\ @return\ a\ reference\ that\ points\ to\ the\ generated\ tree\n
comment5.params=t
comment5.target=int\ countNodes(TreeNode)
comment5.text=\n\ counts\ number\ of\ nodes\ in\ tree\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ node\ of\ the\ tree\n\ @return\ the\ number\ of\ nodes\ in\ tree\n
comment6.params=t
comment6.target=int\ countLeaves(TreeNode)
comment6.text=\n\ counts\ the\ number\ of\ leaves\ in\ the\ tree\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ root\ node\ of\ the\ tree\n\ @return\ the\ number\ of\ leaves\ in\ the\ tree\n
comment7.params=t\ display
comment7.target=void\ preOrder(TreeNode,\ TreeDisplay)
comment7.text=\n\ puts\ values\ of\ binary\ tree\ into\ preorder\:\ root,\ left,\ right\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ parent\ node\ of\ tree\n\ @param\ display\ \ \ \ \ \ \ the\ graphic\ display\ for\ the\ process\n
comment8.params=t\ display
comment8.target=void\ inOrder(TreeNode,\ TreeDisplay)
comment8.text=\n\ puts\ values\ of\ binary\ tree\ into\ inorder\:\ left,\ root,\ right\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ parent\ node\ of\ tree\n\ @param\ display\ \ \ \ \ \ \ the\ graphic\ display\ for\ the\ process\n
comment9.params=t\ display
comment9.target=void\ postOrder(TreeNode,\ TreeDisplay)
comment9.text=\n\ puts\ values\ of\ binary\ tree\ into\ postorder\:\ left,\ right,\ root\n\ @param\ t\ \ \ \ \ \ \ \ \ \ \ \ \ the\ parent\ node\ of\ tree\n\ @param\ display\ \ \ \ \ \ \ the\ graphic\ display\ for\ the\ process\n
numComments=25

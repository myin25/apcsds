#BlueJ class context
comment0.target=Scanner
comment0.text=\n\ A\ Scanner\ is\ responsible\ for\ reading\ an\ input\ stream,\ one\ character\ at\ a\n\ time,\ and\ separating\ the\ input\ into\ tokens.\ \ A\ token\ is\ defined\ as\:\n\ \ 1.\ A\ 'word'\ which\ is\ defined\ as\ a\ non-empty\ sequence\ of\ characters\ that\ \n\ \ \ \ \ begins\ with\ an\ alpha\ character\ and\ then\ consists\ of\ alpha\ characters,\ \n\ \ \ \ \ numbers,\ the\ single\ quote\ character\ "'",\ or\ the\ hyphen\ character\ "-".\ \n\ \ 2.\ An\ 'end-of-sentence'\ delimiter\ defined\ as\ any\ one\ of\ the\ characters\ \n\ \ \ \ \ ".",\ "?",\ "\!".\n\ \ 3.\ An\ end-of-file\ token\ which\ is\ returned\ when\ the\ scanner\ is\ asked\ for\ a\n\ \ \ \ \ token\ and\ the\ input\ is\ at\ the\ end-of-file.\n\ \ 4.\ A\ phrase\ separator\ which\ consists\ of\ one\ of\ the\ characters\ ",","\:"\ or\n\ \ \ \ \ ";".\n\ \ 5.\ A\ digit.\n\ \ 6.\ Any\ other\ character\ not\ defined\ above.\n\ \ \n\ @author\ Mr.\ Page\n\ @author\ Melody\ Yin\n\ @version\ 16\ May\ 2022\n
comment1.params=in
comment1.target=Scanner(java.io.Reader)
comment1.text=\n\ Constructor\ for\ Scanner\ objects.\ \ The\ Reader\ object\ should\ be\ one\ of\n\ \ 1.\ A\ StringReader\n\ \ 2.\ A\ BufferedReader\ wrapped\ around\ an\ InputStream\n\ \ 3.\ A\ BufferedReader\ wrapped\ around\ a\ FileReader\n\ \ The\ instance\ field\ for\ the\ Reader\ is\ initialized\ to\ the\ input\ parameter,\n\ \ and\ the\ endOfFile\ indicator\ is\ set\ to\ false.\ \ The\ currentChar\ field\ is\n\ \ initialized\ by\ the\ getNextChar\ method.\n\ @param\ in\ is\ the\ reader\ object\ supplied\ by\ the\ program\ constructing\n\ \ \ \ \ \ \ \ this\ Scanner\ object.\n
comment10.params=
comment10.target=boolean\ hasNextToken()
comment10.text=\n\ @return\ true\ if\ we\ haven't\ reached\ the\ end\ of\ the\ file\ yet,\ false\n\ \ \ \ \ \ otherwise\n
comment11.params=
comment11.target=Token\ nextToken()
comment11.text=\n\ If\ the\ current\ character\ is\ a\ letter,\ keep\ advancing\ the\ reader\ until\n\ either\ a\ whitespace,\ a\ phrase\ terminator,\ a\ sentence\ terminator,\ or\ \n\ the\ end\ of\ the\ file\ is\ reached.\ If\ the\ consecutive\ tokens\ are\ a\ \n\ letter,\ a\ digit,\ or\ a\ special\ character\ ('\ or\ -),\ then\ these\ strings\ \n\ are\ appended\ to\ a\ temporary\ string,\ and\ once\ a\ terminator\ or\ \n\ whitespace\ is\ reached,\ the\ entire\ string\ is\ returned\ in\ the\ form\ of\ a\n\ WORD\ Token.\n\ \n\ If\ the\ current\ character\ is\ a\ digit,\ return\ a\ new\ Token\ of\ type\ DIGIT.\n\ If\ the\ current\ character\ is\ a\ phrase\ terminator,\ return\ a\ new\ Token\ of\n\ type\ END_OF_PHRASE.\n\ If\ the\ current\ character\ is\ a\ sentence\ terminator,\ return\ a\ new\ Token\n\ of\ type\ END_OF_SENTENCE.\n\ If\ the\ end\ of\ the\ file\ is\ reached,\ return\ a\ new\ Token\ of\ type\ \n\ END_OF_FILE.\n\ \n\ @return\ a\ Token\ of\ type\ UNKNOWN\ otherwise.\n
comment2.params=
comment2.target=void\ getNextChar()
comment2.text=\n\ The\ getNextChar\ method\ attempts\ to\ get\ the\ next\ character\ from\ the\ input\n\ stream.\ \ It\ sets\ the\ endOfFile\ flag\ true\ if\ the\ end\ of\ file\ is\ reached\ on\n\ the\ input\ stream.\ \ Otherwise,\ it\ reads\ the\ next\ character\ from\ the\ stream\n\ and\ converts\ it\ to\ a\ Java\ String\ object.\n\ postcondition\:\ The\ input\ stream\ is\ advanced\ one\ character\ if\ it\ is\ not\ at\n\ end\ of\ file\ and\ the\ currentChar\ instance\ field\ is\ set\ to\ the\ String\ \n\ representation\ of\ the\ character\ read\ from\ the\ input\ stream.\ \ The\ flag\n\ endOfFile\ is\ set\ true\ if\ the\ input\ stream\ is\ exhausted.\n
comment3.params=str
comment3.target=void\ eat(java.lang.String)
comment3.text=\n\ Takes\ in\ String\ object\ and\ compares\ to\ currentChar.\ If\ they\ match,\ \n\ advance\ input\ stream\ (calling\ getNextChar()).\ Otherwise,\ throw\ \n\ IllegalArgumentException.\n\ @param\ str\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ string\ to\ be\ compared\ with\ currentChar\n
comment4.params=str
comment4.target=boolean\ isLetter(java.lang.String)
comment4.text=\n\ @param\ str\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ string\ to\ be\ checked\n\ @return\ true\ if\ str\ is\ a\ letter,\ false\ otherwise\n
comment5.params=str
comment5.target=boolean\ isDigit(java.lang.String)
comment5.text=\n\ @param\ str\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ string\ to\ be\ checked\n\ @return\ true\ if\ str\ is\ a\ digit,\ false\ otherwise\n
comment6.params=str
comment6.target=boolean\ isSpecialChar(java.lang.String)
comment6.text=\n\ @param\ str\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ string\ to\ be\ checked\n\ @return\ true\ if\ str\ is\ a\ special\ character,\ false\ otherwise\n
comment7.params=str
comment7.target=boolean\ isPhraseTerminator(java.lang.String)
comment7.text=\n\ @param\ str\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ string\ to\ be\ checked\n\ @return\ true\ if\ str\ is\ a\ phrase\ terminator,\ false\ otherwise\n
comment8.params=str
comment8.target=boolean\ isSentenceTerminator(java.lang.String)
comment8.text=\n\ @param\ str\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ string\ to\ be\ checked\n\ @return\ true\ if\ str\ is\ a\ sentence\ terminator,\ false\ otherwise\n
comment9.params=str
comment9.target=boolean\ isWhiteSpace(java.lang.String)
comment9.text=\n\ @param\ str\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ string\ to\ be\ checked\n\ @return\ true\ if\ str\ is\ a\ white\ space,\ false\ otherwise\n
numComments=12

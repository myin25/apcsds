#BlueJ class context
comment0.target=Metrics
comment0.text=\n\ Returns\ a\ non-negative\ real\ number\ indicating\ the\ similarity\ of\ two\ \n\ linguistic\ signatures.\ The\ smaller\ the\ number,\ the\ more\ similar\ the\ \n\ signatures.\ Zero\ indicates\ identical\ signatures.\n\ sig1\ and\ sig2\ are\ 6\ element\ lists\ with\ the\ following\ elements\n\ 0\ \ \:\ author\ name\ (a\ string)\n\ 1\ \ \:\ average\ word\ length\ (float)\n\ 2\ \ \:\ TTR\ (float)\n\ 3\ \ \:\ Hapax\ Legomana\ Ratio\ (float)\n\ 4\ \ \:\ average\ sentence\ length\ (float)\n\ 5\ \ \:\ average\ sentence\ complexity\ (float)\n\ weight\ is\ a\ list\ of\ multiplicative\ weights\ to\ apply\ to\ each\ linguistic\ \n\ feature.\ weight[0]\ is\ ignored.\n\n\ @author\ Anu\ Datar\n\ @author\ Melody\ Yin\n\ @version\ 19\ May\ 2022\n
comment1.params=doc
comment1.target=Metrics(Document)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Metrics\n\ @param\ doc\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ document\ whose\ metrics\ are\ to\ be\ evaluated\n
comment10.params=
comment10.target=void\ computeStats()
comment10.text=\n\ compute\ all\ 5\ stats\ \:\ average\ word\ length,\ TTR,\ Hapax\ Legomana\ Ratio,\n\ average\ sentence\ length,\ average\ sentence\ complexity\n
comment11.params=
comment11.target=double[]\ elements()
comment11.text=\n\ @return\ all\ 5\ stats\n
comment2.params=
comment2.target=int\ phraseCount()
comment2.text=\n\ @return\ the\ number\ of\ phrases\ present\ in\ a\ document\n
comment3.params=
comment3.target=int\ wordCount()
comment3.text=\n\ @return\ the\ number\ of\ words\ present\ in\ a\ document\n
comment4.params=
comment4.target=int\ charCount()
comment4.text=\n\ @return\ the\ number\ of\ characters\ present\ in\ a\ document\n
comment5.params=
comment5.target=double\ getavgWordLen()
comment5.text=\n\ @return\ the\ average\ word\ length\ in\ characters\n
comment6.params=
comment6.target=double\ gettypeTokRatio()
comment6.text=\n\ @return\ the\ type\ to\ token\ ratio\ (the\ number\ of\ different\ words\ to\ total\n\ words)\n
comment7.params=
comment7.target=double\ getHapaxLegomanaRatio()
comment7.text=\n\ @return\ the\ hapax\ legomana\ ratio\ (the\ number\ of\ words\ who\ appear\ once\n\ to\ total\ words)\n
comment8.params=
comment8.target=float\ getAverageSentenceLength()
comment8.text=\n\ @return\ the\ average\ sentence\ length\ (total\ words\ /\ number\ of\ sentences)\n
comment9.params=
comment9.target=float\ getAverageSentenceComplexity()
comment9.text=\n\ @return\ the\ average\ number\ of\ phrases\ in\ a\ sentence\ (total\ phrases\ /\ \n\ number\ of\ sentences);\n
numComments=12
